import hlt
from hlt import constants
from hlt.positionals import Direction, Position
# from hlt.game_map 	 import MapCell, GameMap
from hlt import entity 
import random
import logging
from collections import defaultdict

###########################################################################################
def loop_throught_player(piece):
	transformed_piece = {}
	transformed_piece['ID'] 	  = (piece.id)
	transformed_piece['Shipyard'] = (piece.shipyard)
	transformed_piece['Halite']   = (piece.halite_amount)
	transformed_piece['Ships'] 	  = (piece._ships)
	transformed_piece['DropOffs'] = (piece._dropoffs)
	logging.info('Player Metadata From the GAME state: \n\t\t {}'.format(transformed_piece))

def loop_throught_gamemap(piece):
			# Inside class GameMap.
	count = 0 
	transformed_piece = {}
	list_of_cells  	  = {}
	dict_of_cells     = {}
	transformed_piece['width'] 	  = (piece.width)
	transformed_piece['height']   = (piece.height)
	transformed_piece['cells'] 	  = (piece._cells)
			# Inside MapCell that generated by GameMap
	for j in transformed_piece['cells']:
		for i in j:
			count += 1
			list_of_cells['position'] 	   = i.position
			list_of_cells['halite_amount'] = i.halite_amount
			list_of_cells['ship'] 		   = i.ship
			list_of_cells['structure'] 	   = i.structure
			dict_of_cells[str(count)] = list_of_cells

	# logging.info('Player Metadata From the GAME state: \n\t\t {}\n'.format(transformed_piece))
	# logging.info('\nLenght of List: {}\n'.format(len(transformed_piece)))
	# logging.info('\nPicked cells from Dict: {}\n'.format(transformed_piece['cells']))
	# logging.info('\nLenght cells: {}\n'.format(len(transformed_piece['cells'])))
	# logging.info('\nFirst List in Cells: {}\n'.format(transformed_piece['cells'][0]))
	# logging.info('\nLenght of first list: {}\n'.format(len(transformed_piece['cells'][0])))
	# logging.info('Each cell with all parametrs: \n\t\t {}\n'.format(dict_of_cells))
	###########################################################################################




game     = hlt.Game()
game.ready("new_way")
go_home = defaultdict(lambda: False)


while True:
	game.update_frame()


###########################################################################################
###########################################################################################
			#	How I can create Entities
			
	entity_1 = entity.Entity(0,20,Position(10,10))			# I've created Entity object
	ship     = entity.Ship('me', 0, Position(10,10), 666)	# I've created Ship object
	shipyard = entity.Shipyard(1,33,Position(30,30))
	dropoff  = entity.Dropoff(0, 0, Position(10,10))

			#	Our path is hlt.networking --> class Game --> initialize __init__

	# game   = hlt.Game()
	me 			  = game.me 		#	From __init__  --> generate Players
	game_map 	  = game.game_map	#	From __init__  --> generate GameMap
									#	GameMap generates MapCell object onto the line 178 (def _generate())
	game_myid 	  = game.my_id		#	From __init__
	game_players  = game.players 	#	From __init__
	other_players = [p for pid, p in game.players.items() if pid != game.my_id]


	if game.turn_number == 2:
		# logging.info('Player Metadata From the player file: \n\t\t {}\n'.format(me))
		# loop_throught_player(me)
		# logging.info('Player Metadata From the game_map file: \n\t\t {}\n'.format(game_map))
		# # loop_throught_gamemap(game_map)
		# logging.info('	----	: \n\t\t {}\n'.format(other_players))
		# loop_throught_player(other_players[0])

		logging.info('Surrounding Cardinals: \n\t\t {}\n'.format(Position(10,10).get_surrounding_cardinals())) 		# [Position(10, 9), Position(10, 11), Position(11, 10), Position(9, 10)]
		logging.info('Directional Offset: \n\t\t {}\n'.format(Position(10,10).directional_offset(Direction.North))) # Position(10, 9)
		# logging.info('all players: \n\t\t {}\n'.format(game_players))
		# loop_throught(other_players)
###########################################################################################
###########################################################################################



	direction_order = [Direction.North, Direction.South, Direction.East, Direction.West, Direction.Still]
	command_queue = []
	ship_status = {}
	# for ship in me.get_ships():


	if me.halite_amount >= 1000 and not game_map[me.shipyard].is_occupied and len(me.get_ships()) <= 10:
		command_queue.append(me.shipyard.spawn())

	game.end_turn(command_queue)